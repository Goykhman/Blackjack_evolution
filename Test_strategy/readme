* Deck.h contains the Deck class for a single deck of cards, which can be shuffled, and which has the card dealing functionality.

* create_strategy_chromosome.cpp contains the code which allows to create the strategy_chromosome.csv file with a vector of length 800, serving as a strategy chromosome. This vector can then be decoded in the BasicStrategy.h, as the core of the basic strategy decision making functions. It also outputs the strategy into the console, so that one can check it is consistent with what one intended it to be.

* BasicStrategy.h reads the strategy_chromosome.csv and interfaces to its entries via the set of decision-making functions for the split/double down/stand. This collection of functions facilitates phenotypic expression of the strategy_chromosome.csv, decoding its genetic information.

* Game.h contains the Game class which inherits the Deck and the BasicStrategy, and contains functionality to play against the dealer. It uses the strategy prescribed in the BasicStrategy, and it uses the Deck to deal the cards.

* run_simulation.cpp simulates many games of a single player against the dealer, and outputs statistics into .csv files. It also prints to console the results from one sample game.

* produce_plots.py creates plots from the .csv files created by run_somulation.cpp.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The module Test_strategy can be operated as follows:

1. Write the desired strategy in the create_strategy_chromosome.cpp (now it is Thorpâ€™s basic strategy for the full deck), compile and execute.

2. Compile and execute run_simulation.cpp. Then execute produce_plots.py.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The step with writing strategy/compiling/executing create_strategy_chromosome.cpp is to be skipped when we need to test strategy produced by evolutionary selection. In that case bring the resulting .csv file from the Evolve_strategy module (make sure the BasicStrategy.h has its name) and proceed to compiling/executing run_simulation.cpp, and running produce_plots.py.
